{"version":3,"sources":["../src/index.ts"],"sourcesContent":["class Numts {\n  constructor() {}\n  /**\n   * array\n   */\n  public array(arr: number[]) {\n    return arr;\n  }\n\n  /**\n   * full\n   */\n  public full(shape: [number, number], fillValue: number): number[][] {\n    const [rows, cols] = shape;\n    const result: number[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n      const row: number[] = [];\n      for (let j = 0; j < cols; j++) {\n        row.push(fillValue);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n\n  /**\n   * zero\n   */\n  public zeros(shape: [number, number]): number[][] {\n    const [rows, cols] = shape;\n    const result: number[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n      const row: number[] = [];\n      for (let j = 0; j < cols; j++) {\n        row.push(0);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n\n  /**\n   * ones\n   */\n  public ones(shape: [number, number]): number[][] {\n    const [rows, cols] = shape;\n    const result: number[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n      const row: number[] = [];\n      for (let j = 0; j < cols; j++) {\n        row.push(1);\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n\n  /**\n   * eyes\n   */\n  public eyes(size: number): number[][] {\n    const result: number[][] = [];\n\n    for (let i = 0; i < size; i++) {\n      const row: number[] = [];\n      for (let j = 0; j < size; j++) {\n        row.push(i === j ? 1 : 0);\n      }\n      result.push(row);\n    }\n    return result;\n  }\n\n  /**\n   * random\n   */\n  public random(size: [number, number]): number[][] {\n    const [rows, cols] = size;\n    const result: number[][] = [];\n\n    for (let i = 0; i < rows; i++) {\n      const row: number[] = [];\n      for (let j = 0; j < cols; j++) {\n        row.push(Math.random());\n      }\n      result.push(row);\n    }\n\n    return result;\n  }\n\n  /**\n   * clip\n   */\n  public clip(array: number[], min: number, max: number): number[] {\n    return array.map((value) => Math.min(Math.max(value, min), max));\n  }\n\n  /**\n   * where\n   */\n  public where(\n    array: number[],\n    condition: (value: number) => boolean\n  ): number[] {\n    const indices: number[] = [];\n    for (let i = 0; i < array.length; i++) {\n      if (condition(array[i])) {\n        indices.push(i);\n      }\n    }\n    return indices;\n  }\n\n  /**\n   * percentile\n   */\n  public percentile(array: number[], percentile: number): number {\n    const sortedArray = array.slice().sort((a, b) => a - b);\n    const index = (percentile / 100) * (sortedArray.length - 1);\n    if (Number.isInteger(index)) {\n      return sortedArray[index];\n    } else {\n      const lower = Math.floor(index);\n      const upper = Math.ceil(index);\n      return (sortedArray[lower] + sortedArray[upper]) / 2;\n    }\n  }\n\n  /**\n   * sliceArrayFromIndex\n   */\n  public sliceIndex(array: number[], startIndex: number): number[] {\n    return array.slice(startIndex);\n  }\n\n  /**\n   * sliceArrayRange\n   */\n  public sliceArrayRange(\n    array: number[],\n    startIndex: number,\n    endIndex: number\n  ): number[] {\n    return array.slice(startIndex, endIndex);\n  }\n\n  /**\n   * sliceArrayFromIndexToEnd\n   */\n  public sliceToEnd(array: number[], startIndex: number): number[] {\n    return array.slice(startIndex);\n  }\n\n  /**\n   * sliceEndToEnd\n   */\n  public sliceEndToEnd(\n    array: number[],\n    startFromEnd: number,\n    endFromEnd: number\n  ): number[] {\n    return array.slice(-startFromEnd, -endFromEnd);\n  }\n\n  /**\n   * sliceWithStep\n   */\n  public sliceWithStep(\n    array: number[],\n    start: number,\n    end: number,\n    step: number\n  ): number[] {\n    const result: number[] = [];\n    for (let i = start; i < end; i += step) {\n      result.push(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * selectEvery\n   */\n  public selectEvery(array: number[], step: number = 2): number[] {\n    const result: number[] = [];\n    for (let i = 0; i < array.length; i += step) {\n      result.push(array[i]);\n    }\n    return result;\n  }\n\n  /**\n   * sliceFromArray\n   */\n  public sliceFromArray(array: number[], start: number, end: number): number[] {\n    return array.slice(start, end);\n  }\n}\n\nexport { Numts };\n"],"mappings":"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","names":[]}